generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  name          String?
  emailVerified Boolean      @default(false)
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  missionary    Missionary?  // 1-to-1 relation

  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Missionary {
  id                String     @id @default(uuid())
  userId            String     @unique
  title             String?
  phone             String?
  shortBio          String?
  fullBio           String?
  location          String?
  qualification     String?
  website           String?
  experience        String?
  years             String?
  mission           String?
  focus             String?
  status            String?
  prayerRequests    String[]
  recentUpdates     Json?
  supportNeeds      Json?
  type              String?
  role              String?
  strategyId        String?
  livesImpacted     Int?
  communitiesServed Int?
  projectsCompleted Int?
  isDeleted         Boolean    @default(false)

  Strategy          Strategy?  @relation(fields: [strategyId], references: [id])
  Donation          Donation[]
  user              User       @relation(fields: [userId], references: [id])
}

model Projects {
  id               String     @id @default(uuid())
  title            String
  slug             String     @unique
  shortDescription String
  image            Bytes?
  category         String?
  location         String?
  duration         String?
  teamSize         String?
  fundingGoal      String?
  fundingRaised    String?
  beneficiaries    String?
  problem          String?
  solution         String?
  urgency          String?
  urgencyFactors   String[]
  impact           String[]
  timeLine         Json?
  testimonials     Json?
  strategyId       String?
  Strategy         Strategy?   @relation(fields: [strategyId], references: [id])
  Donation         Donation[]
  isDeleted        Boolean     @default(false)
  createdAt        DateTime    @default(now())

  @@map("Projects")
}

model Donation {
  id            String       @id @default(uuid())
  amount        Float
  donorName     String
  donorEmail    String?
  projectId     String?
  missionaryId  String?
  strategyId    String?
  transactionId String?

  project       Projects?    @relation(fields: [projectId], references: [id])
  missionary    Missionary?  @relation(fields: [missionaryId], references: [id])
  strategy      Strategy?    @relation(fields: [strategyId], references: [id])
  transaction   Transaction? @relation(fields: [transactionId], references: [id])

  createdAt     DateTime     @default(now())
  status        String
  paymentMethod String?
  isDeleted     Boolean      @default(false)
}

model Transaction {
  id            String     @id @default(uuid())
  donationId    String     @unique
  donation      Donation   @relation(fields: [donationId], references: [id])
  amount        Float
  status        String
  paymentMethod String?
  reference     String?
  createdAt     DateTime   @default(now())
  isDeleted     Boolean    @default(false)
}

model Strategy {
  id          String       @id @default(uuid())
  name        String
  description String?
  missionaries Missionary[]
  projects     Projects[]
  donations    Donation[]
}
